var e="# Table\n\nUsed to display data like a list of objects in a table like view.\n\n```html\n<v-table\n	:headers=\"[\n		{\n			text: 'Name',\n			value: 'name'\n		},\n		{\n			text: 'Phone Number',\n			value: 'tel'\n		},\n		{\n			text: 'Contact',\n			value: 'person'\n		}\n	]\"\n	:items=\"[\n		{\n			name: 'Amsterdam',\n			tel: '020-1122334',\n			person: 'Mariann Rumble'\n		},\n		{\n			name: 'New Haven',\n			tel: '(203) 687-9900',\n			person: 'Helenka Killely'\n		}\n	]\"\n/>\n```\n\n## Headers\n\n| Property   | Description                                                  | Default |\n| ---------- | ------------------------------------------------------------ | ------- |\n| `text`\\*   | Text displayed in the column                                 | --      |\n| `value`\\*  | Name of the object property that holds the value of the item | --      |\n| `align`    | Text alignment of value. One of `left`, `center`, `right`    | `left`  |\n| `sortable` | If the column can be sorted on                               | `true`  |\n| `width`    | Custom width of the column in px                             | --      |\n\n## Custom element / component for header\n\nYou can override the displayed header name by using the dynamic `header.[name]` slot. `[name]` is the `value` property\nin the header item for this column sent to `headers`.\n\n```html\n<v-table :headers=\"headers\" :items=\"items\">\n	<template #[`header.name`]=\"{ header }\">\n		<v-button>{{ header.text }}</v-button>\n	</template>\n</v-table>\n```\n\nIn this slot, you have access to the `header` through the scoped slot binding.\n\n## Custom element / component for cell value\n\nYou can override the columns in a row by using the dynamic `item.[name]` slot. `[name]` is the `value` property in the\nheader item for this column sent to `headers`.\n\n```html\n<v-table :headers=\"headers\" :items=\"items\">\n	<template #[`item.name`]=\"{ item }\">\n		<v-button>{{ item.name }}</v-button>\n	</template>\n</v-table>\n```\n\nIn this slot, you have access to the `item` through the scoped slot binding.\n\n## Resizable rows\n\nAdding the `show-resize` prop allows the user to resize the columns at will. You can keep your headers updated by using\nthe `v-model` directive or listening to the `update:headers` event:\n\n```html\n<template>\n	<v-table v-model:headers=\"headers\" :items=\"[]\" show-resize>\n</template>\n\n<script>\nimport { defineComponent, ref } from 'vue';\nimport { HeaderRaw } from '@/components/v-table/types';\n\nexport default defineComponent({\n	setup() {\n		const headers = ref<HeaderRaw[]>([\n			{\n				text: 'Column 1',\n				value: 'col1',\n				width: 150\n			},\n			{\n				text: 'Column 1',\n				value: 'col1',\n				width: 300\n			}\n		]);\n\n		return { headers };\n	}\n});\n<\/script>\n```\n\n## Reference\n\n#### Props\n\n| Prop                 | Description                                                                                       | Default                     | Type          |\n| -------------------- | ------------------------------------------------------------------------------------------------- | --------------------------- | ------------- |\n| `headers`\\*          | What columns to show in the table. Supports the `v-model` directive                               |                             | `HeaderRaw[]` |\n| `items`\\*            | The individual items to render as rows                                                            |                             | `Item[]`      |\n| `disabled`           | Disable edits to items in the form (drag/select)                                                  | `false`                     | `Boolean`     |\n| `fixed-header`       | Make the header fixed                                                                             | `false`                     | `Boolean`     |\n| `inline`             | Display the table inline with other text                                                          | `false`                     | `Boolean`     |\n| `item-key`           | Primary key of the item. Used for keys / selections                                               | `'id'`                      | `String`      |\n| `loading-text`       | What text to show when table is loading with no items                                             | `i18n.global.t('loading')`  | `String`      |\n| `loading`            | Show progress indicator                                                                           | `false`                     | `Boolean`     |\n| `manual-sort-key`    | What field to use for manual sorting                                                              | `null`                      | `String`      |\n| `must-sort`          | Requires the sort to be on a particular column                                                    | `false`                     | `Boolean`     |\n| `no-items-text`      | What text to show when table doesn't contain any rows                                             | `i18n.global.t('no_items')` | `String`      |\n| `row-height`         | Height of the individual rows in px                                                               | `48`                        | `Number`      |\n| `selection-use-keys` | What field to use for selection                                                                   | `false`                     | `Boolean`     |\n| `selection`          | What items are selected. Can be used with `v-model` as well                                       | `() => []`                  | `any`         |\n| `server-sort`        | Handle sorting on the parent level.                                                               | `false`                     | `Boolean`     |\n| `show-manual-sort`   | Show manual sort drag handles                                                                     | `false`                     | `Boolean`     |\n| `show-resize`        | Show resize handlers                                                                              | `false`                     | `Boolean`     |\n| `show-select`        | Show checkboxes                                                                                   | `false`                     | `Boolean`     |\n| `sort`               | What column / order to sort by. Supports the `v-model` directive. `{ by: string, desc: boolean }` | `null`                      | `Sort`        |\n\n#### Events\n\n| Event            | Description                                         | Value                           |\n| ---------------- | --------------------------------------------------- | ------------------------------- |\n| `update:sort`    | `v-model` event for `sort` prop                     | `{ by: string, desc: boolean }` |\n| `click:row`      | When a row has been clicked                         |                                 |\n| `update:items`   | When changes to the items where made                |                                 |\n| `manual-sort`    | When a user manually sorts the items                |                                 |\n| `update:headers` | `v-model` event for `headers` prop or `HeaderRaw[]` |                                 |\n| `item-selected`  | Emitted when an item is selected or deselected      | `{ item: any, value: boolean }` |\n| `select`         | Emitted when selected items change                  | `any[]`                         |\n\n#### Slots\n\n| Slot                     | Description                  | Data |\n| ------------------------ | ---------------------------- | ---- |\n| `header.${header.value}` | A slot for each header       |      |\n| `item.${header.value}`   | A slot for each item         |      |\n| `item-append`            | Adds to the end of each item |      |\n| `footer`                 | Could be used for pagination |      |\n\n#### CSS Variables\n\n| Variable                      | Default                    |\n| ----------------------------- | -------------------------- |\n| `--v-table-height`            | `auto`                     |\n| `--v-table-sticky-offset-top` | `0`                        |\n| `--v-table-color`             | `var(--foreground-normal)` |\n| `--v-table-background-color`  | `var(--background-page)`   |\n";export{e as default};
